<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    namespace 名称空间
    id 唯一标识
    resultType 返回值类型
    #{id} 从传递来的参数中取出id值
-->
<mapper namespace="dao.EmployeeMapper">
    <!--初次使用mybatis-->
    <!--根据员工id查询员工
        id：唯一标识符
        resultType：查询结果类型
        #{empId}：传入参数名
    -->
    <select id="getByEmpId" resultType="bean.Employee">
        select *
        from emp
        where emp_id=#{empId}
    </select>

    <!-- 查找单个员工 -->
    <select id="getEmpById" resultType="bean.Employee">
        select *
        from emp
        where id = #{id}
    </select>
    <!-- 当实体类的成员属性与数据表字段名不一致是，就会返回null，解决方法时在sql中为不同名的列名起别名-->
    <select id="selectEmpList02" resultType="bean.Employee">
        select *
        from emp
        where id = #{id}
    </select>

    <!-- 增加员工方法 -->
    <insert id="addEmp" parameterType="bean.Employee" useGeneratedKeys="true" keyProperty="id">
        insert into emp (id, emp_name, gender, email)
        values (#{id}, #{empName}, #{gender}, #{email})
    </insert>

    <!-- 更新员工方法 -->
    <update id="updateEmp">
        update emp
        set id=#{id},emp_name=#{empName},gender=#{gender},email=#{email}
        where id=#{id}
    </update>

    <!-- 删除员工方法 -->
    <delete id="deleteEmp">
        delete from emp where id=#{id}
    </delete>

    <!-- 获取员工列表 -->
    <select id="getEmpList" resultType="bean.Employee">
        select * from emp
    </select>

    <!-- mybatis多个参数处理 -->
    <select id="mybatisParas" resultType="bean.Employee">
        select * from emp where id=#{param1} and emp_name=#{param2}
    </select>

    <!-- 多参数之POJO -->
    <select id="getEmpByPOJO" resultType="bean.Employee">
        select * from emp where id=#{id} and emp_name=#{empName}
    </select>

    <!-- 多参数 map -->
    <select id="getEmpByMap" resultType="bean.Employee">
        select * from emp where id=#{id} and emp_name=#{empName}
    </select>

    <!-- dao接口的返回值是集合 -->
    <select id="getEmpByLastnameLike" resultType="bean.Employee">
        select * from emp
    </select>

    <!-- dao接口的返回值时Map -->
    <select id="getEmpByLastNameMap" resultType="map">
        select * from emp where id=#{param1}
    </select>

    <!-- 多条记录封装成一个Map -->
    <select id="getEmpByReturnMaps" resultType="bean.Employee">
        select *
        from emp
    </select>

    <!-- resultMap自定义封装规则 -->
    <resultMap id="MyEmp" type="bean.Employee">
        <!--
            id标签用于定义逐渐列的封装规则，定义逐渐底层有优化
            column指定那一列的字段为逐渐
            property指定对象的javaBean属性
        -->
        <id column="id" property="id"/>

        <!--定义普通列封装规则-->
        <result column="emp_name" property="empName"/>
        <!-- 其他不指定的列会自动封装，但是推荐只要写resultMap，就将全部的映射规则都写上，方便检查-->
    </resultMap>
    
    <select id="getByIdResultMap" resultMap="MyEmp">
        select * from emp where id=#{id}
    </select>


    <!-- 关联查询 -->
    <resultMap id="EmpAndDeptOne" type="bean.Employee">
        <id column="id" property="id"></id>
        <result column="emp_name" property="empName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <result column="dept_id" property="dept.deptId"/>
        <result column="dept_name" property="dept.deptName"/>
    </resultMap>
    <select id="getEmpAndDept" resultMap="EmpAndDept">
        select t1.id,t1.emp_name,t1.gender,t1.email,t1.dept_id,t2.dept_name
        from emp t1,dept t2
        where t1.dept_id=t2.dept_id and t1.id=#{id}
    </select>

    <!-- 关联查询之使用association标签 -->
    <resultMap id="EmpAndDept" type="bean.Employee">
        <id column="id" property="id"/>
        <result column="emp_name" property="empName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>

        <!--
            association可以指定联合的JavaBean对象
            property指定哪个属性是联合对象，比如emp对象中有个属性叫做dept，是另一个实体类对象
            javaType指定这个属性对象的类型，比如dept的实体类是Department
        -->
        <association property="dept" javaType="bean.Department">
            <id column="dept_id" property="deptId"/>
            <result column="dept_name" property="deptName"/>
        </association>
    </resultMap>

    <!-- association分步查询 -->
    <resultMap id="resultEmpIdAndDeptId" type="bean.Employee">
        <id column="id" property="id"/>
        <result column="emp_name" property="empName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <result column="dept_id" property="deptId"/>


        <!--
            1. 先根据员工id查找员工信息
            2. 根据员工信息中的dept_id去dept表查部门信息
            3. 将部门信息设置到员工中

            select表明当前属性是调用select指定的方法查出结果
            column指定将那一列的值传递给这个方法
        -->
        <association property="dept" select="dao.DepartmentDAO.getByDeptId" column="dept_id"/>

    </resultMap>
    <select id="getByEmpIdSelectDeptName" resultMap="resultEmpIdAndDeptId">
        select * from emp where id=#{id}
    </select>


</mapper>